"""Test file for secp192r1"""
import math
import sys
import random
import matplotlib.pyplot as plt
import base64
from Point import Point
from KoblitzAlgorithm import KoblitzAlgorithm
from ECC import ECC

class Test192r1(object):

    def main():
        print("-------------------Elliptic curve cryptography-------------------")
        print("-----encryption and decryption of an image using secp256-r1------")
        print("-----------------------------------------------------------------")
        print("\n")
        
        """I'm reading an image and trasfom it into a string"""
        with open("./Elliptic_curve1.png", "rb") as image:
            b64string = base64.b64encode(image.read())
        
        """Decode the string into ascii and trasform this string in a ascii character array"""
        message=b64string.decode('ascii')
        #message='ciao'
        msg=[]
        for c in message:
            msg.append(ord(c))

        """Curve on p-256r1"""
        
        p=int('FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF', 16)
        a=int('FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC', 16)
        b=int('5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B', 16)
        gx=int('6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296',16)
        gy=int('4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5',16)
        G=Point(gx, gy)
        n=int('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551',16)
        h=int('01',16)
        seed=int('C49D360886E704936A6678E1139D26B7819F7E90',16)

        print("-------------------Curve parameters------------------------------")
        print("-----------------------------------------------------------------")
        print("Odd prime p is ", p,"\n")
        print("Value of a is ", a, "\n")
        print("Value of b is ", b, "\n")
        print("Generator point G is ", G.getCoordinate(), "\n")
        print("Point order is ", n, "\n")
        print("Starting value of h is ", h, "\n")
        print("Seed for random value is ", seed, "\n")

        #Curve setting and keys generation
        encryptor=ECC(a,b,p, G,n,h,seed)
        random.seed(seed)

        print("-------------------Keys generation-----------------------------")
        print("---------------------------------------------------------------")
        (kprvM,kpubM)=encryptor.keys_generator()
        print("Mitt keys are: ")
        print("Private key ", kprvM)
        print("Public key ", kpubM.getCoordinate())
        print("---------------------------------------------------------------")
        (kprvD,kpubD)=encryptor.keys_generator()
        print("Dest keys are: ")
        print("Private key ", kprvD)
        print("Public key ", kpubD.getCoordinate())
        print("---------------------------------------------------------------")
        print("\n")

        transformer=KoblitzAlgorithm(a,b,p)
        trovato=False
        ErrPoint=Point(-1,-1)
        #Trasform every characters of the message in curve point if it is possible
        while not trovato:
            p_message=[]
            for i in msg:
                Pm=transformer.trasform_message(i,h)
                plt.plot(Pm.X,Pm.Y, marker='.')
                #If Pm is (-1,-1), it's not a curve point and it can't be added to the array
                if Pm.equals(ErrPoint):
                    break
                p_message.append(Pm)
            if p_message.__len__()!=msg.__len__():
                print("It's impossible to generate a point for this value of h ", h)
                h+=1
            else:
                trovato=True
                print("Right value of h is ", h)

        """Plot settings and show"""
        plt.title("Message points generated with Koblitz algorithm")
        plt.show()

        #Message encryption simulation
        print("Now encrypt the message")
        encrypted_message=[]
        print(p_message.__len__())
        count=0
        for cr in p_message:
            #for every point i'll use a different r to have different pair on same points 
            r=random.randint(1,n-1)
            (V,W)=encryptor.encrypt(r, kpubD, cr)
            plt.plot(V.X,V.Y, marker='.')
            plt.plot(W.X,W.Y, marker='.')
            encrypted_message.append((V,W))
            count+=1
        
        plt.title("Points pair generated by the encryption method")
        plt.show()
        
        #Message decryption simulation
        print("Now you have to decrypt message")
        decrypt_message=[]
        for couple in encrypted_message:
            c=encryptor.decrypt(couple,kprvD)
            decrypt_message.append(c)
        
        msgrcv=[]
        for p in decrypt_message:
            msgrcv.append(math.floor(p.X//h))

        s=""
        for i in msgrcv:
            s+=chr(i)
        
        print(s==message)
        imagedata=base64.b64decode(s)
        image='new_image.png'
        with open(image, 'wb') as f:
            f.write(imagedata)

    if __name__=="__main__":
        main()